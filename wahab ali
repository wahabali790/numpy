# How numpy is faster than python

import numpy as np

d=np.arange(1000000)

%time for i in range(1,10): r=[x*2 for x in l]

%time for i in range(1,10): r=[x*2 for x in l]

%time for i in range(1,10): r=d*2

# A dimension array of object

x=np.zeros((3,3))
x

x=np.zeros((5,5))

x

y=np.ones((4,4))

y

y=np.ones((6,6))

y

m=np.empty((3,4))#empty can return any thing
m

m=np.empty((4,5))#empty can return any thing

m

l=[1,2,3,4]
a=np.array(l)

a

lst=[25,50,57,78]
p=np.array(lst)
p

n=np.arange(1,100,10)
n

n.shape

x=np.zeros((10,10))
x

x.shape

a=x.reshape(2,2,5,5)

a

x=np.ones((2,6))
x

x.reshape((3,2,2))

# Arithmatic with ndarray

a=np.random.randn((5))
a

b=np.random.randn((5))
b

a+b

a-b

a*b

b*2

a>0

a[a>0]

a.dtype

a.ndim

# Indexing and slicing

x=np.array([1,10,3,5,2])

x

x[4]

x[x>2]

x[[3,1,2]]

x=np.random.randn(6,6)
x

x[0]

# sclicing

import numpy as np
x

x[1:4]

x[0:5:2]

x[2:,1:4]

import numpy as np
x=np.ones((5,5))
x

x[2:-2,2:-2]=4
x


x

x=np.ones((5,5))
x

x[1:-1,1:-1]=0
x

# Element wise array function

x=np.array([4,6,7,2,3])
np.sqrt(x)

np.power(x,3)

y=[7,5,2,8,7]

np.maximum(y,x)

# np.where()

salary=np.array([0,-1,10000,25000])
np.where(salary<=0,30000,salary)

np.where(salary<=0,"NOT OK","OK")

# MATHEMATICAL &STATISTICAL METHOD

x=np.array([10,9,7,10,7])

x

x.mean()

x.cumsum()

x.cumprod()

y=x>6
y

y.sum()

y.any()

y.all()

y=x>7

y

y.sum()

y.any()

y.all()

x.sort()

x

np.unique(x)

l=range(1000000)

%time for i in range(1,10): r=[x*2 for x in l]

%time for i in range(1,10): r=[x*2 for x in l]

%time for i in range(1,10): r=[x*2 for x in l]
